<?php
namespace {{namespace}};

use Exception;
use {{repo_interface_fqcn}};

class {{controller_class}}
{
    protected ${{repo_prop}};

    /**
     * Constructing the controller.
     *
     * @param {{repository_interface}} ${{repo_prop}}  The repository object
     */
    public function __construct({{repository_interface}} ${{repo_prop}})
    {
        $this->{{repo_prop}} = ${{repo_prop}};
    }

    /**
     * Show all available resources.
     */
    public function index()
    {
        $entities = $this->{{repo_prop}}->findAll();

        return View::make(
            '{{template_path}}/index',
            [
                'title'         => '{{entity|replace('_', ' ')|capitalize}} list',
                'page_title'    => '{{entity|replace('_', ' ')|capitalize}} list',
                'active_menu'   => {% if module %}'admin_sidebar.{{module}}.{{entity}}'{% else %}'admin_sidebar.{{entity}}'{% endif %}
            ]
        );
    }

    /**
     * Show single resource with specific id.
     */
    public function show($id)
    {
        try {
            $entity = $this->{{repo_prop}}->findById($id);
            
            return Response::json($entity->toArray());
        } catch (Exception $e) {
            return Response::ajax(
                'Error occured while retrieving {{entity|replace('_', ' ')}}',
                500,
                [[
                    'message'   => $e->getMessage(),
                    'code'      => $e->getCode()
                ]]
            );
        }
    }

    /**
     * Create new resource in database.
     */
    public function store()
    {
        $data   = Request::get('{{entity}}_data');
        $entity = $this->{{repo_prop}}->entityFactory($data);

        try {
            $entity = $this->{{repo_prop}}->save($entity);

            return Response::ajax('New {{entity|replace('_', ' ')}} has been created!', 201);
        } catch (Exception $e) {
            return Response::ajax(
                'Error occured while creating new {{entity|replace('_',' ')}}!',
                500,
                [[
                    'message'   => $e->getMessage(),
                    'code'      => $e->getCode()
                ]]
            );
        }
    }

    /**
     * Update existing resource in the database.
     */
    public function update($id)
    {
        try {
            $entity = $this->{{repo_prop}}->findById($id);

            $data   = Request::get('{{entity}}_data');

            {% for field in fields %}$entity->set{{field.name_studly}}($data['{{field.name_camel}}']);
            {% endfor %}

            $entity = $this->{{repo_prop}}->save($entity);

            return Response::ajax('{{entity|replace('_', ' ')|capitalize}} has been updated!');
        } catch (Exception $e) {
            return Response::ajax(
                'Error occured while updating {{entity|replace('_', ' ')}}!',
                500,
                [[
                    'message'   => $e->getMessage(),
                    'code'      => $e->getCode()
                ]]
            );
        }

        return Response::redirect(Url::to('{{url_name}}.edit', ['id' => $entity->getId()]));
    }

    /**
     * Remove specified resource in database.
     */
    public function delete($id)
    {
        try {
            $entity = $this->{{repo_prop}}->entityFactory(['id' => $id]);

            $this->{{repo_prop}}->delete($entity);

            return Response::ajax('{{entity|replace('_', ' ')|capitalize}} has been deleted!');
        } catch (Exception $e) {
            return Response::ajax(
                'Error occured while deleting {{entity|replace('_', ' ')}}!',
                500,
                [[
                    'message'   => $e->getMessage(),
                    'code'      => $e->getCode()
                ]]
            );
        }
    }


    /**
     * Build a datatable response.
     */
    public function datatable()
    {
        $datatable = Datatable::of($this->{{repo_prop}}->buildDatatableQuery())
        /** add more fields based on your table */
        ->setColumn([{% for field in fields %}'{{field.name}}', {% endfor %}])
        ->setFormatter(
            function ($row) {
                $showUrl        = Url::to('{{url_name}}.show', ['id' => $row->id]);
                $deleteUrl      = Url::to('{{url_name}}.delete', ['id' => $row->id]);

                $showButton     = '<button href="' . $showUrl . '" class="btn btn-xs btn-info btn-{{entity|replace('_','-')}}-show" style="margin-right: 5px">show</button>';
                $editButton     = '<button href="' . $showUrl . '" class="btn btn-xs btn-primary btn-{{entity|replace('_','-')}}-edit" style="margin-right: 5px">edit</button>';
                $deleteButton   = '<button href="' . $deleteUrl . '" class="btn btn-xs btn-danger btn-{{entity|replace('_','-')}}-delete" style="margin-right: 5px">delete</button>';

                /** format your fields as you need */
                return [
                    {% for field in fields %}$row->{{field.name}},
                    {% endfor %}

                    $showButton . $editButton . $deleteButton
                ];
            }
        )
        ->make();

        return Response::json($datatable);
    }
}
