<?php
{{namespace}}
{{repositoryInterfaceFqcn}}

class {{controller}}
{
    protected $repository;

    /**
     * Constructing the controller.
     *
     * @param {{repositoryInterface}} $repository  The repository object
     */
    public function __construct({{repositoryInterface}} $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Show all available resources.
     */
    public function index($page = 1)
    {
        $datum = $this->repository->findAll();

        return Response::json(
            [
                'datum' => $datum,
                'page'  => $page,
            ]
        );
    }

    /**
     * Show single resource with specific id.
     */
    public function show($id)
    {
        $entity = $this->repository->findById($id);

        return Response::json($entity);
    }

    /**
     * Create new resource in database.
     */
    public function store()
    {
        $data   = Request::get('data');

        try {
            $entity = $this->repository->create($data);

            return Response::json(
                [
                    'message'   => 'New {{entity}} has been created!',
                    'data'      => $entity
                ],
                201
            );
        } catch (Exception $e) {
            return Response::json(
                [
                    'message'   => 'Error occured while creating {{entity}}!',
                    'data'      => $entity,
                    'error'     => [
                        'message'   => $e->getMessage(),
                        'code'      => $e->getCode()
                    ]
                ],
                500
            );
        }
    }

    /**
     * Update existing resource in the database.
     */
    public function update($id)
    {
        $data = Request::get('data');

        try {
            $entity = $this->repository->update($id, $data);

            return Response::json(
                [
                    'message'   => '{{entity}} has been updated!',
                    'data'      => $entity
                ],
                200
            );
        } catch (Exception $e) {
            return Response::json(
                [
                    'message'   => 'Error occured while updating {{entity}}!',
                    'data'      => $entity,
                    'error'     => [
                        'message'   => $e->getMessage(),
                        'code'      => $e->getCode()
                    ]
                ],
                500
            );
        }
    }

    /**
     * Remove specified resource in database.
     */
    public function delete($id)
    {
        try {
            $this->repository->delete($id);

            return Response::json(['message' => '{{entity}} has been deleted!'], 200);

        } catch (Exception $e) {
            return Response::json(
                [
                    'message'   => 'Error occured while deleting {{entity}}!',
                    'data'      => $entity,
                    'error'     => [
                        'message'   => $e->getMessage(),
                        'code'      => $e->getCode()
                    ]
                ],
                500
            );
        }
    }
}
